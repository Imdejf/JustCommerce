// <auto-generated />
using System;
using JustCommerce.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustCommerce.Persistence.Migrations
{
    [DbContext(typeof(JustCommerceDbContext))]
    [Migration("20220720170924_ChangeInProductTag")]
    partial class ChangeInProductTag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JustCommerce.Domain.Entities.Common.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomAttributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StateProvinceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address", "common");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Company.StoreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Hosts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SslEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Directory.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowsBilling")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsShipping")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToVat")
                        .HasColumnType("bit");

                    b.Property<string>("ThreeLetterIsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoLetterIsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Country", "directory");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Directory.StateProvinceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id");

                    b.ToTable("CheckoutAttribute", "directory");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.CMSUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FtpPhotoFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.Property<int>("RegisterSource")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SelectedShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Theme")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.UserPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionDomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionFlagValue")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissionEntity");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.UserStoreEntity", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStore", "identity");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Language.LanguageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInternational")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOrginal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("_Language");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeControlType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ConditionAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShippableProductRequired")
                        .HasColumnType("bit");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextPrompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("int");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionAttributeId")
                        .IsUnique()
                        .HasFilter("[ConditionAttributeId] IS NOT NULL");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_CheckoutAttribute_Id1");

                    b.HasIndex("StoreId");

                    b.HasIndex("TaxCategoryId");

                    b.ToTable("CheckoutAttribute", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckoutAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorSquaresRgb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CheckoutAttributeId");

                    b.HasIndex("Id");

                    b.ToTable("CheckoutAttributeValue", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueLangEntity", b =>
                {
                    b.Property<Guid>("CheckoutAttributeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckoutAttributeValueId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CheckoutAttributeValueLang", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.Common.ProductSpecificationAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<string>("CustomValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowOnProductPage")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpecificationAttributeOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecificationAttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecificationAttributeOptionId");

                    b.ToTable("ProductSpecificationAttribute", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("PredefinedProductAttributeValue", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueLangEntity", b =>
                {
                    b.Property<Guid>("PredefinedProductAttributeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredefinedProductAttributeValueId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PredefinedProductAttributeValueLang", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductAttribute", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeLangEntity", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeLang", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecificationAttributeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SpecificationAttributeGroupId");

                    b.ToTable("SpecificationAttribute", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("SpecificationAttributeGroup", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorSquaresRgb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecificationAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SpecificationAttributeId");

                    b.ToTable("SpecificationAttributeOption", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionLangEntity", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecificationAttributeOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "SpecificationAttributeOptionId");

                    b.HasIndex("SpecificationAttributeOptionId");

                    b.ToTable("SpecificationAttributeOptionLang", "attribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowBackInStockSubscriptions")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedQuantities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackorderMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomerEntersPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("DeliveryDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayStockAvailability")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("GTIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiftCardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTierPrices")
                        .HasColumnType("bit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTelecommunicationsOrBroadcastingOrElectronicServices")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LowStockActivity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ManageInventoryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ManufacturerPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("bit");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("int");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ParentGroupedProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductAvailabilityRangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("RentalPriceLength")
                        .HasColumnType("int");

                    b.Property<string>("RentalPricePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipSeparately")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("bit");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TaxCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseMultipleWarehouses")
                        .HasColumnType("bit");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("bit");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDateId");

                    b.HasIndex("Id");

                    b.HasIndex("ParentGroupedProductId")
                        .IsUnique()
                        .HasFilter("[ParentGroupedProductId] IS NOT NULL");

                    b.HasIndex("ProductAvailabilityRangeId");

                    b.HasIndex("TaxCategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Product", "product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Product.ProductWarehouseInventoryEntity", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductWarehouseInventory", "product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductProductTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductProductTag", "product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductTag", "product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductTagLangEntity", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "ProductTagId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductTagLang", "product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.DeliveryDateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StoreId");

                    b.ToTable("DeliveryDate", "shipping");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.ProductAvailabilityRangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductAvailabilityRange", "shipping");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.WarehouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Warehouse", "shipping");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Tax.TaxCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("TaxCategory", "tax");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Vendor.VendorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageSize")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceTo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Id");

                    b.ToTable("Vendor", (string)null);
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Vendor.VendorLangEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("VendorLang", (string)null);
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Common.AddressEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Directory.CountryEntity", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Directory.StateProvinceEntity", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Directory.StateProvinceEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Directory.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.UserPermissionEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Identity.CMSUserEntity", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.UserStoreEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany("AllowedUser")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Identity.CMSUserEntity", "User")
                        .WithMany("AllowedStore")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Language.LanguageEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany("Language")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", "ConditionAttribute")
                        .WithOne()
                        .HasForeignKey("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", "ConditionAttributeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Tax.TaxCategoryEntity", "TaxCategory")
                        .WithMany()
                        .HasForeignKey("TaxCategoryId");

                    b.Navigation("ConditionAttribute");

                    b.Navigation("Store");

                    b.Navigation("TaxCategory");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", "CheckoutAttribute")
                        .WithMany("CheckoutAttributeValue")
                        .HasForeignKey("CheckoutAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckoutAttribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueEntity", "CheckoutAttributeValue")
                        .WithMany("CheckoutAttributeValueLang")
                        .HasForeignKey("CheckoutAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckoutAttributeValue");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.Common.ProductSpecificationAttributeEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Product.ProductEntity", "Product")
                        .WithMany("ProductSpecificationAttribute")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionEntity", "SpecificationAttributeOption")
                        .WithMany("ProductSpecificationAttribute")
                        .HasForeignKey("SpecificationAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeEntity", "ProductAttribute")
                        .WithMany("PredefinedProductAttributeValue")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueEntity", "PredefinedProductAttributeValue")
                        .WithMany("PredefinedProductAttributeValueLang")
                        .HasForeignKey("PredefinedProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PredefinedProductAttributeValue");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeEntity", "ProductAttribute")
                        .WithMany("ProductAttributeLang")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeGroupEntity", "SpecificationAttributeGroup")
                        .WithMany("SpecificationAttribute")
                        .HasForeignKey("SpecificationAttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationAttributeGroup");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeGroupEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeEntity", "SpecificationAttribute")
                        .WithMany("SpecificationAttributeOption")
                        .HasForeignKey("SpecificationAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationAttribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionEntity", "SpecificationAttributeOption")
                        .WithMany("SpecificationAttributeOptionLang")
                        .HasForeignKey("SpecificationAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Product.ProductEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Shipping.DeliveryDateEntity", "DeliveryDate")
                        .WithMany("Product")
                        .HasForeignKey("DeliveryDateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Product.ProductEntity", "ParentGroupedProduct")
                        .WithOne()
                        .HasForeignKey("JustCommerce.Domain.Entities.Products.Product.ProductEntity", "ParentGroupedProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("JustCommerce.Domain.Entities.Shipping.ProductAvailabilityRangeEntity", "ProductAvailabilityRange")
                        .WithMany("Product")
                        .HasForeignKey("ProductAvailabilityRangeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Tax.TaxCategoryEntity", "TaxCategory")
                        .WithMany("Product")
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Vendor.VendorEntity", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryDate");

                    b.Navigation("ParentGroupedProduct");

                    b.Navigation("ProductAvailabilityRange");

                    b.Navigation("TaxCategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Product.ProductWarehouseInventoryEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Product.ProductEntity", "Product")
                        .WithMany("ProductWarehouseInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Shipping.WarehouseEntity", "Warehouse")
                        .WithMany("ProductWarehouseInventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductProductTagEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Products.Product.ProductEntity", "Product")
                        .WithMany("ProductProductTag")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Tags.ProductTagEntity", "ProductTag")
                        .WithMany("ProductProductTag")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductTagEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductTagLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Products.Tags.ProductTagEntity", "ProductTag")
                        .WithMany("ProductTagLang")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.DeliveryDateEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.ProductAvailabilityRangeEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.WarehouseEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Common.AddressEntity", "Adress")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Company.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Vendor.VendorEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Common.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Vendor.VendorLangEntity", b =>
                {
                    b.HasOne("JustCommerce.Domain.Entities.Language.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustCommerce.Domain.Entities.Vendor.VendorEntity", "Vendor")
                        .WithMany("VendorLang")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Company.StoreEntity", b =>
                {
                    b.Navigation("AllowedUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Directory.CountryEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Directory.StateProvinceEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Identity.CMSUserEntity", b =>
                {
                    b.Navigation("AllowedStore");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeEntity", b =>
                {
                    b.Navigation("CheckoutAttributeValue");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.CheckoutAttributes.CheckoutAttributeValueEntity", b =>
                {
                    b.Navigation("CheckoutAttributeValueLang");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.PredefinedProductAttributeValueEntity", b =>
                {
                    b.Navigation("PredefinedProductAttributeValueLang");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.ProductAttribute.ProductAttributeEntity", b =>
                {
                    b.Navigation("PredefinedProductAttributeValue");

                    b.Navigation("ProductAttributeLang");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeEntity", b =>
                {
                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeGroupEntity", b =>
                {
                    b.Navigation("SpecificationAttribute");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Attributes.SpecificationAttribute.SpecificationAttributeOptionEntity", b =>
                {
                    b.Navigation("ProductSpecificationAttribute");

                    b.Navigation("SpecificationAttributeOptionLang");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Product.ProductEntity", b =>
                {
                    b.Navigation("ProductProductTag");

                    b.Navigation("ProductSpecificationAttribute");

                    b.Navigation("ProductWarehouseInventory");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Products.Tags.ProductTagEntity", b =>
                {
                    b.Navigation("ProductProductTag");

                    b.Navigation("ProductTagLang");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.DeliveryDateEntity", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.ProductAvailabilityRangeEntity", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Shipping.WarehouseEntity", b =>
                {
                    b.Navigation("ProductWarehouseInventory");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Tax.TaxCategoryEntity", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("JustCommerce.Domain.Entities.Vendor.VendorEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("VendorLang");
                });
#pragma warning restore 612, 618
        }
    }
}
